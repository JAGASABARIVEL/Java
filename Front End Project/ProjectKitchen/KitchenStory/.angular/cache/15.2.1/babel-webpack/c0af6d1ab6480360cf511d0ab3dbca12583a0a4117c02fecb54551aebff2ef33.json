{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nlet CartsComponent = class CartsComponent {\n  constructor(productService, router, Router) {\n    this.productService = productService;\n  }\n  removeFunction(pId) {\n    this.cart.splice(this.cart.indexOf(pId), 1);\n    if (this.cart.length === 0) {\n      this.productService.eventEmitter.emit(\"col-sm-12\");\n    }\n  }\n  plus($event) {\n    console.log(this.productService.getCarts());\n    let plusAttrib = $event.target.id;\n    let countAttribute = 'count' + plusAttrib.slice(4, plusAttrib.length);\n    console.log(plusAttrib.slice(4, plusAttrib.length));\n    let value = Number(document.getElementById(countAttribute).innerHTML);\n    document.getElementById(countAttribute).innerHTML = String(value + 1);\n  }\n  minus($event) {\n    let minusAttrib = $event.target.id;\n    let countAttribute = 'count' + minusAttrib.slice(5, minusAttrib.length);\n    let spliceParam = Number(minusAttrib.slice(5, minusAttrib.length));\n    console.log(Number($event.target.id));\n    let value = Number(document.getElementById(countAttribute).innerHTML);\n    if (value > 0) {\n      document.getElementById(countAttribute).innerHTML = String(value - 1);\n    } else {\n      this.cart.splice(this.cart.indexOf(this.cart.find(carts => carts.pId === Number(minusAttrib.slice(5, minusAttrib.length)))), 1);\n    }\n  }\n  total() {\n    let tot = 0;\n    for (let number of this.cart) {\n      tot = tot + number.pPrice;\n    }\n    return tot;\n  }\n  checkout() {}\n  concat(pre, post) {\n    return pre + post;\n  }\n};\n__decorate([Input()], CartsComponent.prototype, \"cart\", void 0);\nCartsComponent = __decorate([Component({\n  selector: 'app-carts',\n  templateUrl: './carts.component.html',\n  styleUrls: ['./carts.component.css']\n})], CartsComponent);\nexport { CartsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,eAAe;AAUzC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAGzBC,YAAoBC,cAA+B,EAAEC,MAAM,EAACC,MAAM;IAA9C,mBAAc,GAAdF,cAAc;EAAkC;EAEpEG,cAAc,CAACC,GAAc;IAC3B,IAAI,CAACC,IAAI,CAACC,MAAM,CAAC,IAAI,CAACD,IAAI,CAACE,OAAO,CAACH,GAAG,CAAC,EAAE,CAAC,CAAC;IAC3C,IAAG,IAAI,CAACC,IAAI,CAACG,MAAM,KAAK,CAAC,EAAC;MACxB,IAAI,CAACR,cAAc,CAACS,YAAY,CAACC,IAAI,CAAC,WAAW,CAAC;;EAEtD;EAEAC,IAAI,CAACC,MAAM;IACTC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACd,cAAc,CAACe,QAAQ,EAAE,CAAC;IAC3C,IAAIC,UAAU,GAAYJ,MAAM,CAACK,MAAM,CAACC,EAAE;IAC1C,IAAIC,cAAc,GAAG,OAAO,GAAGH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAEJ,UAAU,CAACR,MAAM,CAAC;IACrEK,OAAO,CAACC,GAAG,CAACE,UAAU,CAACI,KAAK,CAAC,CAAC,EAAEJ,UAAU,CAACR,MAAM,CAAC,CAAC;IACnD,IAAIa,KAAK,GAAGC,MAAM,CAACC,QAAQ,CAACC,cAAc,CAACL,cAAc,CAAC,CAACM,SAAS,CAAC;IACrEF,QAAQ,CAACC,cAAc,CAACL,cAAc,CAAC,CAACM,SAAS,GAAGC,MAAM,CAACL,KAAK,GAAG,CAAC,CAAC;EAEvE;EAEAM,KAAK,CAACf,MAAM;IACV,IAAIgB,WAAW,GAAYhB,MAAM,CAACK,MAAM,CAACC,EAAE;IAC3C,IAAIC,cAAc,GAAG,OAAO,GAAGS,WAAW,CAACR,KAAK,CAAC,CAAC,EAAEQ,WAAW,CAACpB,MAAM,CAAC;IACvE,IAAIqB,WAAW,GAAGP,MAAM,CAACM,WAAW,CAACR,KAAK,CAAC,CAAC,EAAEQ,WAAW,CAACpB,MAAM,CAAC,CAAC;IAClEK,OAAO,CAACC,GAAG,CAACQ,MAAM,CAACV,MAAM,CAACK,MAAM,CAACC,EAAE,CAAC,CAAC;IACrC,IAAIG,KAAK,GAAGC,MAAM,CAACC,QAAQ,CAACC,cAAc,CAACL,cAAc,CAAC,CAACM,SAAS,CAAC;IACrE,IAAIJ,KAAK,GAAG,CAAC,EAAC;MACVE,QAAQ,CAACC,cAAc,CAACL,cAAc,CAAC,CAACM,SAAS,GAAGC,MAAM,CAACL,KAAK,GAAG,CAAC,CAAC;KACxE,MACG;MACF,IAAI,CAAChB,IAAI,CAACC,MAAM,CAAC,IAAI,CAACD,IAAI,CAACE,OAAO,CAAC,IAAI,CAACF,IAAI,CAACyB,IAAI,CAACC,KAAK,IAAEA,KAAK,CAAC3B,GAAG,KAAKkB,MAAM,CAACM,WAAW,CAACR,KAAK,CAAC,CAAC,EAAEQ,WAAW,CAACpB,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;;EAEjI;EAEAwB,KAAK;IACH,IAAIC,GAAG,GAAG,CAAC;IACX,KAAI,IAAIC,MAAM,IAAI,IAAI,CAAC7B,IAAI,EAAC;MAC1B4B,GAAG,GAAGA,GAAG,GAAGC,MAAM,CAACC,MAAM;;IAE3B,OAAOF,GAAG;EACZ;EACAG,QAAQ,IAER;EACAC,MAAM,CAACC,GAAG,EAAEC,IAAI;IACd,OAAOD,GAAG,GAACC,IAAI;EACjB;CACD;AAhDUC,YAAR3C,KAAK,EAAE,4CAAmB;AADhBC,cAAc,eAL1BF,SAAS,CAAC;EACT6C,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACW7C,cAAc,CAiD1B;SAjDYA,cAAc","names":["Component","Input","CartsComponent","constructor","productService","router","Router","removeFunction","pId","cart","splice","indexOf","length","eventEmitter","emit","plus","$event","console","log","getCarts","plusAttrib","target","id","countAttribute","slice","value","Number","document","getElementById","innerHTML","String","minus","minusAttrib","spliceParam","find","carts","total","tot","number","pPrice","checkout","concat","pre","post","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Jagasabarivel K\\OneDrive - Dell Technologies\\Documents\\Simplilearn Class Project\\Front End Project Class 3\\ProjectKitchen\\KitchenStory\\src\\app\\home\\carts\\carts.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ProductService } from '../../service/products.service';\nimport { Products } from '../../model/Products.model';\n\n@Component({\n  selector: 'app-carts',\n  templateUrl: './carts.component.html',\n  styleUrls: ['./carts.component.css']\n})\nexport class CartsComponent {\n  @Input() cart : Products[];\n\n  constructor(private productService : ProductService, router Router){}\n\n  removeFunction(pId : Products){\n    this.cart.splice(this.cart.indexOf(pId), 1);\n    if(this.cart.length === 0){\n      this.productService.eventEmitter.emit(\"col-sm-12\");\n    }\n  }\n\n  plus($event){\n    console.log(this.productService.getCarts());\n    let plusAttrib : string = $event.target.id\n    let countAttribute = 'count' + plusAttrib.slice(4, plusAttrib.length);\n    console.log(plusAttrib.slice(4, plusAttrib.length));\n    let value = Number(document.getElementById(countAttribute).innerHTML);\n    document.getElementById(countAttribute).innerHTML = String(value + 1);\n   \n  }\n\n  minus($event){\n    let minusAttrib : string = $event.target.id\n    let countAttribute = 'count' + minusAttrib.slice(5, minusAttrib.length);\n    let spliceParam = Number(minusAttrib.slice(5, minusAttrib.length));\n    console.log(Number($event.target.id))\n    let value = Number(document.getElementById(countAttribute).innerHTML);\n    if (value > 0){\n        document.getElementById(countAttribute).innerHTML = String(value - 1);\n    }\n    else{\n      this.cart.splice(this.cart.indexOf(this.cart.find(carts=>carts.pId === Number(minusAttrib.slice(5, minusAttrib.length)))), 1);\n    }\n  }\n\n  total(){\n    let tot = 0;\n    for(let number of this.cart){\n      tot = tot + number.pPrice;\n    }\n    return tot;\n  }\n  checkout(){\n\n  }\n  concat(pre, post){\n    return pre+post;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}