{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class QuestionService {\n  constructor() {\n    this.questions = [{\n      question: \"Which is the national capital of India?\",\n      choice: {\n        choice1: \"New Delhi\",\n        choice2: \"Bangalore\",\n        choice3: \"Chennai\",\n        choice4: \"Hyderabad\",\n        choosenanswer: \"\"\n      },\n      answer: \"New Delhi\"\n    }, {\n      question: \"Which is the national game of India?\",\n      choice: {\n        choice1: \"Cricket\",\n        choice2: \"Hockey\",\n        choice3: \"Tennis\",\n        choice4: \"Badmitton\",\n        choosenanswer: \"\"\n      },\n      answer: \"Hockey\"\n    }, {\n      question: \"Which is the national bird of India?\",\n      choice: {\n        choice1: \"Myna\",\n        choice2: \"Crow\",\n        choice3: \"Peacock\",\n        choice4: \"Piegeon\",\n        choosenanswer: \"\"\n      },\n      answer: \"Peacock\"\n    }, {\n      question: \"Which is the national color of India?\",\n      choice: {\n        choice1: \"Yellow\",\n        choice2: \"Green\",\n        choice3: \"Black\",\n        choice4: \"Orange\",\n        choosenanswer: \"\"\n      },\n      answer: \"Black\"\n    }, {\n      question: \"Which is the national anthem of India?\",\n      choice: {\n        choice1: \"Jana Gana Mana\",\n        choice2: \"Jana Gana Mana\",\n        choice3: \"Jana Gana Mana\",\n        choice4: \"Jana Gana Mana\",\n        choosenanswer: \"\"\n      },\n      answer: \"Jana Gana Mana\"\n    }];\n  }\n  getQuestions() {\n    return this.questions;\n  }\n  verifyAnswer(userAnswer) {\n    let result = this.mapUserQuestion(userAnswer);\n    return result.answer === userAnswer.choice.choosenanswer;\n  }\n  mapUserQuestion(userAnswer) {\n    return this.questions.find(qs => qs.question === userAnswer.question);\n  }\n}\nQuestionService.ɵfac = function QuestionService_Factory(t) {\n  return new (t || QuestionService)();\n};\nQuestionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: QuestionService,\n  factory: QuestionService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,eAAe;EAH5BC;IAKI,cAAS,GAAgB,CACrB;MAACC,QAAQ,EAAG,yCAAyC;MACjDC,MAAM,EAAG;QACLC,OAAO,EAAG,WAAW;QACrBC,OAAO,EAAG,WAAW;QACrBC,OAAO,EAAG,SAAS;QACnBC,OAAO,EAAG,WAAW;QACrBC,aAAa,EAAG;OACnB;MACDC,MAAM,EAAG;IAAW,CAAC,EAErB;MAACP,QAAQ,EAAG,sCAAsC;MAClDC,MAAM,EAAG;QACLC,OAAO,EAAG,SAAS;QACnBC,OAAO,EAAG,QAAQ;QAClBC,OAAO,EAAG,QAAQ;QAClBC,OAAO,EAAG,WAAW;QACrBC,aAAa,EAAG;OACnB;MACDC,MAAM,EAAG;IAAQ,CAAC,EAElB;MAACP,QAAQ,EAAG,sCAAsC;MAClDC,MAAM,EAAG;QACLC,OAAO,EAAG,MAAM;QAChBC,OAAO,EAAG,MAAM;QAChBC,OAAO,EAAG,SAAS;QACnBC,OAAO,EAAG,SAAS;QACnBC,aAAa,EAAG;OACnB;MACDC,MAAM,EAAG;IAAS,CAAC,EAEnB;MAACP,QAAQ,EAAG,uCAAuC;MACnDC,MAAM,EAAG;QACLC,OAAO,EAAG,QAAQ;QAClBC,OAAO,EAAG,OAAO;QACjBC,OAAO,EAAG,OAAO;QACjBC,OAAO,EAAG,QAAQ;QAClBC,aAAa,EAAG;OACnB;MACDC,MAAM,EAAG;IAAO,CAAC,EAEjB;MAACP,QAAQ,EAAG,wCAAwC;MACpDC,MAAM,EAAG;QACLC,OAAO,EAAG,gBAAgB;QAC1BC,OAAO,EAAG,gBAAgB;QAC1BC,OAAO,EAAG,gBAAgB;QAC1BC,OAAO,EAAG,gBAAgB;QAC1BC,aAAa,EAAG;OACnB;MACDC,MAAM,EAAG;IAAgB,CAAC,CACjC;;EAEDC,YAAY;IACR,OAAO,IAAI,CAACC,SAAS;EACzB;EAEAC,YAAY,CAACC,UAAqB;IAC9B,IAAIC,MAAM,GAAI,IAAI,CAACC,eAAe,CAACF,UAAU,CAAC;IAC9C,OAAOC,MAAM,CAACL,MAAM,KAAKI,UAAU,CAACV,MAAM,CAACK,aAAa;EAC5D;EAEAO,eAAe,CAACF,UAAqB;IACjC,OAAO,IAAI,CAACF,SAAS,CAACK,IAAI,CAACC,EAAE,IACzBA,EAAE,CAACf,QAAQ,KAAKW,UAAU,CAACX,QAAQ,CAAC;EAC5C;;AAlESF,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAkB,SAAflB,eAAe;EAAAmB,YAFX;AAAM","names":["QuestionService","constructor","question","choice","choice1","choice2","choice3","choice4","choosenanswer","answer","getQuestions","questions","verifyAnswer","userAnswer","result","mapUserQuestion","find","qs","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Jagasabarivel K\\OneDrive - Dell Technologies\\Documents\\Simplilearn Class Project\\Front End Project Class 3\\Project 2\\OnlineTestApplication\\src\\app\\service\\question.service.ts"],"sourcesContent":["import { Injectable } from  '@angular/core';\r\nimport { Question } from '../model/question.model';\r\n\r\n@Injectable( {\r\n    providedIn : \"root\"\r\n})\r\nexport class QuestionService{\r\n\r\n    questions : Question[] = [\r\n        {question : \"Which is the national capital of India?\",\r\n            choice : {\r\n                choice1 : \"New Delhi\",\r\n                choice2 : \"Bangalore\",\r\n                choice3 : \"Chennai\",\r\n                choice4 : \"Hyderabad\",\r\n                choosenanswer : \"\"\r\n            },\r\n            answer : \"New Delhi\"},\r\n\r\n            {question : \"Which is the national game of India?\",\r\n            choice : {\r\n                choice1 : \"Cricket\",\r\n                choice2 : \"Hockey\",\r\n                choice3 : \"Tennis\",\r\n                choice4 : \"Badmitton\",\r\n                choosenanswer : \"\"\r\n            },\r\n            answer : \"Hockey\"},\r\n\r\n            {question : \"Which is the national bird of India?\",\r\n            choice : {\r\n                choice1 : \"Myna\",\r\n                choice2 : \"Crow\",\r\n                choice3 : \"Peacock\",\r\n                choice4 : \"Piegeon\",\r\n                choosenanswer : \"\"\r\n            },\r\n            answer : \"Peacock\"},\r\n\r\n            {question : \"Which is the national color of India?\",\r\n            choice : {\r\n                choice1 : \"Yellow\",\r\n                choice2 : \"Green\",\r\n                choice3 : \"Black\",\r\n                choice4 : \"Orange\",\r\n                choosenanswer : \"\"\r\n            },\r\n            answer : \"Black\"},\r\n\r\n            {question : \"Which is the national anthem of India?\",\r\n            choice : {\r\n                choice1 : \"Jana Gana Mana\",\r\n                choice2 : \"Jana Gana Mana\",\r\n                choice3 : \"Jana Gana Mana\",\r\n                choice4 : \"Jana Gana Mana\",\r\n                choosenanswer : \"\"\r\n            },\r\n            answer : \"Jana Gana Mana\"},\r\n    ];\r\n\r\n    getQuestions() : Question[]{\r\n        return this.questions;\r\n    }\r\n\r\n    verifyAnswer(userAnswer : Question) : boolean{\r\n        let result  = this.mapUserQuestion(userAnswer);\r\n        return result.answer === userAnswer.choice.choosenanswer;\r\n    }\r\n    \r\n    mapUserQuestion(userAnswer : Question) : Question{\r\n        return this.questions.find(qs=>\r\n            qs.question === userAnswer.question);\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}