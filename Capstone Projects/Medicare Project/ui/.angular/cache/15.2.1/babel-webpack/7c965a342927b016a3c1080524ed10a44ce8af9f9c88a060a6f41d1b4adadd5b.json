{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(route) {\n    this.route = route;\n  }\n  canActivate(route, state) {\n    if (this.isLoggedIn()) {\n      return true;\n    } else {\n      this.route.navigate(['/login']);\n      return false;\n    }\n  }\n  isLoggedIn() {\n    let status = false;\n    if (localStorage.getItem('isLoggedIn') == \"true\") {\n      status = true;\n    } else {\n      status = false;\n    }\n    return status;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,KAAc;IAAd,UAAK,GAALA,KAAK;EAAW;EACpCC,WAAW,CACTD,KAA6B,EAC7BE,KAA0B;IAC1B,IAAI,IAAI,CAACC,UAAU,EAAE,EAAC;MACpB,OAAO,IAAI;KACZ,MACI;MACH,IAAI,CAACH,KAAK,CAACI,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAC/B,OAAO,KAAK;;EAEhB;EAEOD,UAAU;IACf,IAAIE,MAAM,GAAG,KAAK;IAClB,IAAIC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,MAAM,EAAE;MAC/CF,MAAM,GAAG,IAAI;KACf,MACM;MACJA,MAAM,GAAG,KAAK;;IAEjB,OAAOA,MAAM;EACb;;AAvBSP,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAU,SAATV,SAAS;EAAAW,YAFR;AAAM","names":["AuthGuard","constructor","route","canActivate","state","isLoggedIn","navigate","status","localStorage","getItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Jagasabarivel K\\OneDrive - Dell Technologies\\Documents\\Capstone Projects\\Medicare Project\\ui\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private route : Router){}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (this.isLoggedIn()){\n      return true;\n    }\n    else {\n      this.route.navigate(['/login']);    \n      return false;\n    }\n  }\n  \n  public isLoggedIn(): boolean {      \n    let status = false;      \n    if (localStorage.getItem('isLoggedIn') == \"true\") {      \n       status = true;      \n    }\n      else {\n       status = false;\n       }      \n    return status;      \n    }  \n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}